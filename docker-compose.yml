version: '3.8'

services:
  # Attacker container - performs ARP DoS attacks
  attacker:
    build:
      context: ./attacker
      dockerfile: Dockerfile
    container_name: arp_attacker
    hostname: attacker
    privileged: true # Required for raw sockets
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      arp_lab:
        ipv4_address: 10.0.1.10
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
    environment:
      - ATTACKER_IP=10.0.1.10
      - VICTIM_IP=10.0.1.20
      - OBSERVER_IP=10.0.1.30
      - GATEWAY_IP=10.0.1.1
      - SUBNET=10.0.1
    depends_on:
      - victim
      - observer
    stdin_open: true
    tty: true
    command: [ "python", "/app/attacker_main.py" ]

  # Victim container - simulates target network services
  victim:
    build:
      context: ./victim
      dockerfile: Dockerfile
    container_name: arp_victim
    hostname: victim
    networks:
      arp_lab:
        ipv4_address: 10.0.1.20
    volumes:
      - ./logs:/app/logs
    environment:
      - VICTIM_IP=10.0.1.20
      - ATTACKER_IP=10.0.1.10
      - OBSERVER_IP=10.0.1.30
      - GATEWAY_IP=10.0.1.1
    stdin_open: true
    tty: true
    command: [ "python", "/app/victim_main.py" ]

  # Observer container - monitors and analyzes traffic
  observer:
    build:
      context: ./observer
      dockerfile: Dockerfile
    container_name: arp_observer
    hostname: observer
    privileged: true # Required for packet capture
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      arp_lab:
        ipv4_address: 10.0.1.30
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./captures:/app/captures
    environment:
      - OBSERVER_IP=10.0.1.30
      - ATTACKER_IP=10.0.1.10
      - VICTIM_IP=10.0.1.20
      - GATEWAY_IP=10.0.1.1
      - SUBNET=10.0.1
    stdin_open: true
    tty: true
    command: [ "python", "/app/observer_main.py" ]

  # Web Monitor container - dashboard interface
  web_monitor:
    build:
      context: ./web_monitor
      dockerfile: Dockerfile
    container_name: arp_web_monitor
    hostname: web_monitor
    ports:
      - "8080:8080" # Bind to monitoring interface
    networks:
      arp_lab:
        # For lab communication
        ipv4_address: 10.0.1.40
      monitor_net:
        # Dedicated monitoring network
        ipv4_address: 192.168.100.10
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./captures:/app/captures
    environment:
      - WEB_MONITOR_IP=10.0.1.40
      - ATTACKER_IP=10.0.1.10
      - VICTIM_IP=10.0.1.20
      - OBSERVER_IP=10.0.1.30
      - GATEWAY_IP=10.0.1.1
      - SUBNET=10.0.1
    depends_on:
      - attacker
      - victim
      - observer
    stdin_open: true
    tty: true
    command: [ "python", "monitor_main.py" ]

  # Defender container - active protection against ARP attacks
  defender:
    build:
      context: ./defender
      dockerfile: Dockerfile
    container_name: arp_defender
    hostname: defender
    privileged: true # Required for iptables and raw sockets
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_ADMIN
    networks:
      arp_lab:
        ipv4_address: 10.0.1.50
      monitor_net:
        ipv4_address: 192.168.100.20
    ports:
      - "8082:8082" # Defense dashboard
      - "8083:8083" # Defense API
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./captures:/app/captures
    environment:
      - DEFENDER_IP=10.0.1.50
      - ATTACKER_IP=10.0.1.10
      - VICTIM_IP=10.0.1.20
      - OBSERVER_IP=10.0.1.30
      - MONITOR_IP=10.0.1.40
      - GATEWAY_IP=10.0.1.1
      - SUBNET=10.0.1
    depends_on:
      - victim
      - observer
    stdin_open: true
    tty: true
    command: [ "python", "/app/defense_main.py" ]

networks:
  arp_lab:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.1.0/24
  monitor_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  logs:
  results:
  captures:
